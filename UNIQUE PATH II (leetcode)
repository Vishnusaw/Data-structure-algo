class Solution {
private:
    int solve(vector<vector<int>>& mat,int i,int j,int m,int n,vector<vector<int>>& dp){
    
    
        
    if(i==m-1 && j==n-1) return 1;
    
    if(i>=m || j>=n) return 0;
    
    if(mat[i][j] == 1) return 0;
    
    if(dp[i][j] != -1) return dp[i][j];
    
    return dp[i][j] = solve(mat,i+1,j,m,n,dp) + solve(mat,i,j+1,m,n,dp);
}
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        
        if(obstacleGrid[m-1][n-1] == 1) return 0;
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        
        return solve(obstacleGrid,0,0,m,n,dp);
    }
};
